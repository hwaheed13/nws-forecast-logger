name: Capture Predictions EST
on:
  schedule:
    - cron: '0 11 * * *'  # 7 AM EDT
    - cron: '0 23 * * *'  # 7 PM EDT
  workflow_dispatch:

jobs:
  capture:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      
      - name: Install dependencies
        run: pip install requests pytz
      
      - name: Capture and Log Predictions
        run: |
          python3 << 'EOF'
          import requests
          from datetime import datetime, timedelta, timezone
          import pytz
          
          # Config
          PREDICTIONS_API_URL = "https://app.dailydewpoint.com/api/predictions"  # <-- replace with actual
          SNAPSHOT_API_URL = "https://app.dailydewpoint.com/api/log-prediction-snapshot"
          
          # Time handling
          et = pytz.timezone('America/New_York')
          now = datetime.now(et)
          hour = now.hour
          today = now.strftime('%Y-%m-%d')
          tomorrow = (now + timedelta(days=1)).strftime('%Y-%m-%d')
          timestamp = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f')[:-3] + 'Z'
          
          print(f"Current ET hour: {hour}")
          print(f"Current ET date: {today}")
          
          # Get predictions JSON
          response = requests.get(PREDICTIONS_API_URL)
          if response.status_code != 200:
              print(f"Failed to fetch predictions (status={response.status_code})")
              print(response.text[:500])
              raise SystemExit(1)
          
          data = response.json()
          print("Fetched predictions JSON:", data)
          
          # Assume JSON has keys like {"today": 81.3, "tomorrow": 82.1}
          value_today = data.get("today")
          value_tomorrow = data.get("tomorrow")
          
          if value_today is None or value_tomorrow is None:
              print("Could not find expected keys in JSON")
              raise SystemExit(1)
          
          # Log to snapshot API
          if hour == 7:
              r1 = requests.post(SNAPSHOT_API_URL, json={
                  'target_date': today,
                  'prediction_type': 'morning_of',
                  'prediction_value': float(value_today),
                  'snapshot_time': timestamp
              })
              print(f"Logged morning_of: {value_today} (status={r1.status_code})")
              
              r2 = requests.post(SNAPSHOT_API_URL, json={
                  'target_date': tomorrow,
                  'prediction_type': 'day_before_morning',
                  'prediction_value': float(value_tomorrow),
                  'snapshot_time': timestamp
              })
              print(f"Logged day_before_morning: {value_tomorrow} (status={r2.status_code})")
          
          elif hour == 19:
              r3 = requests.post(SNAPSHOT_API_URL, json={
                  'target_date': tomorrow,
                  'prediction_type': 'night_before',
                  'prediction_value': float(value_tomorrow),
                  'snapshot_time': timestamp
              })
              print(f"Logged night_before: {value_tomorrow} (status={r3.status_code})")
          else:
              print(f"Manual run at hour {hour}")
          EOF
