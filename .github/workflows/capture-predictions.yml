name: Capture Predictions EST
on:
  schedule:
    - cron: '0 11 * * *'  # 7 AM EDT
    - cron: '0 23 * * *'  # 7 PM EDT
  workflow_dispatch:

jobs:
  capture:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Playwright
        run: |
          npm install playwright

      - name: Capture and Log Predictions
        run: |
          node << 'EOF'
          const { chromium } = require('playwright');
          const fetch = require('node-fetch');

          (async () => {
            const browser = await chromium.launch();
            const page = await browser.newPage();
            await page.goto('https://app.dailydewpoint.com/', { waitUntil: 'networkidle' });

            // Grab prediction values from UI
            const values = await page.$$eval('.prediction-value', els => els.map(e => e.textContent.replace('Â°F','').trim()));

            console.log("Found prediction values:", values);

            if (values.length < 2) {
              console.error("Could not find enough values.");
              process.exit(1);
            }

            const valueToday = parseFloat(values[0]);
            const valueTomorrow = parseFloat(values[values.length - 1]);

            const now = new Date();
            const hourET = new Intl.DateTimeFormat('en-US', { hour: 'numeric', hour12: false, timeZone: 'America/New_York' }).format(now);
            const today = new Intl.DateTimeFormat('en-CA', { timeZone: 'America/New_York' }).format(now);
            const tomorrow = new Intl.DateTimeFormat('en-CA', { timeZone: 'America/New_York' }).format(new Date(now.getTime() + 24*60*60*1000));
            const timestamp = now.toISOString();

            console.log(`ET hour: ${hourET}, Today: ${today}, Tomorrow: ${tomorrow}`);
            console.log(`TODAY=${valueToday}, TOMORROW=${valueTomorrow}`);

            const apiUrl = "https://app.dailydewpoint.com/api/log-prediction-snapshot";

            if (hourET == 7) {
              await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  target_date: today,
                  prediction_type: 'morning_of',
                  prediction_value: valueToday,
                  snapshot_time: timestamp
                })
              });
              console.log(`Logged morning_of: ${valueToday}`);

              await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  target_date: tomorrow,
                  prediction_type: 'day_before_morning',
                  prediction_value: valueTomorrow,
                  snapshot_time: timestamp
                })
              });
              console.log(`Logged day_before_morning: ${valueTomorrow}`);

            } else if (hourET == 19) {
              await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  target_date: tomorrow,
                  prediction_type: 'night_before',
                  prediction_value: valueTomorrow,
                  snapshot_time: timestamp
                })
              });
              console.log(`Logged night_before: ${valueTomorrow}`);
            } else {
              console.log(`Manual run at ET hour ${hourET}`);
            }

            await browser.close();
          })();
          EOF
